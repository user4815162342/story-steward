/*
   Copyright 2011 Neil M. Sheldon

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


 */
/*
 * This contains the basic editable attributes for this project. The build system
 * may do some substitution from from the values here.
 * NOTE: In addition to tracking version numbers easily, the primary reason for
 * this file is to have one place in which to store the Application name and other
 * identifiers. I'm not particularly proud of the name, and I'd like to be able to
 * switch it easily when I come up with something better.
 */

load(scriptPath + "runprocess.js");
// Get the svn version stuff...


logger.info("Retrieving current revision number");
var revision = "0";
var buffer = new java.io.ByteArrayOutputStream();
var ps = new java.io.PrintStream(buffer);
try {
	RunProcess("svnversion", scriptPath + "../", ps);
	revision = new String(buffer.toString()).replace(/^\s*/, "").replace(/\s*$/, "") || "0";
} finally {
	ps.close();
}
logger.info("Revision number found is: " + revision);


AppInfo = {
	// ApplicationTitle is the full name for the application, as
	// displayed on screen to the user.
	Title: "Story Steward",
	// ApplicationName is used in file naming.
	Name: "StorySteward",
	// ApplicationID is used in creating IDs, such as the acceptable
	// file formats for the current version.
	ID: "story-steward",
	Version: {
		Major: "0",
		Minor: "9",
		// The following numbers are automatically generated. 
		/*
		 * The Build number is taken from build-number.txt. Whenever the application
		 * is packaged (make deploy), this number is also appended to the
		 * name of the created package. After this packaging, the build
		 * number is incremented in the file. This is done so that any time
		 * code is checked out of the version control system, it will always
		 * be capable of producing the same build number. 
		 */
		Build: fileUtil.readFile(scriptPath + "build-number.txt").replace(/^\s*/, "").replace(/\s*$/, ""),
		/* 
		 * The Revision number is taken from revision-number.txt. This needs
		 * to be generated by a script which extracts the information from the
		 * version control system, and should always match the revision number
		 * of the version that was extracted from the system.
		 */
		Revision: revision

	}
}
